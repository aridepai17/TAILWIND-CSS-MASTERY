CSS ::before, ::after SELECTOR 

The ::before and ::after pseudo-selectors in CSS are used to
add content before or after an element without changing
the actual HTML structure.
They're great for inserting things like icons, decorative
elements, or even text.
These pseudo-elements are like invisible children of the
selected element—they only exist in CSS.

HOW DO THEY WORK? 
These pseudo-elements are like invisible children of the
selected element—they only exist in CSS.
Both ::before and ::after need the content property to
work. Even if you just want to insert an empty block or
shape, you still need to define content, even if it’s just an
empty string ("").

Here's how they behave: 

::before
Creates content that shows before the main content of an element.

::after 
Creates content that shows after the main content of an element.

KEY DETAILS AND EXAMPLE 

Let’s break it down with a more detailed example.
Imagine you have a <button> that you want to style by
adding a decorative arrow before the text:

<button> Click Me </button>

Using ::before, you can insert an arrow before the "Click Me" text:

button:before {
  content: "<-"; // Adds an arrow before the button text
  color: blue;  // Colors the arrow blue
  font-size: 25px;  // Makes the arrow bigger 
  margin-right: 8px; // Adds some space between the arrow
}

The content Property: 

Text or Symbols: You can insert text, symbols, or characters with content.
For example, content: "*"; adds the * symbol.

Empty Content: If you just want to style something (like a background or border) without adding any text,
use content: ""; (empty string)

Images: You can also insert images using content: url('image.png');


MORE COMPLEX EXAMPLE (with ::after)
et’s say you want to add an icon after every link to make it
clear that it leads to an external site:
Imagine you have a <button> that you want to style by
adding a decorative arrow before the text:

<a href="https://example.com>Visit Example</a>

With ::after, you can add a small icon after the link:

a::after {
  content: "**"; // Adds link icon after the text 
  margin-right: 5px; // Adds a little space between the text and icon
}

Now, the link would look like this: "Visit Example **"


BLOCK OR INLINE?
By default, the ::before and ::after pseudo-elements
are inline. That means they behave like text—sitting on the
same line as the content. 

But you can change this using display.

Block elements - If you want these pseudo-elements to act like block elements (taking up the full width), you can use display: block.

div::after {
  content: "Before the content";
  display: block;
  font-weight: bold;
}

This adds the text "Before the content" as a bold, blocklevel element before a <div>'s content.

STYLING BEYOND TEXT 

::before and  ::after aren't just for adding text. You can style them just like any other element.
For example, you can give them:

But you can change this using display.
- Background: Add a background color or even a background image.
- Borders: Add borders to create decorative lines or boxes.
- Postioning: Use position: absolute to position the pseudo-elements relative to their parent.

Example: Adding a decorative shape 
Suppose you want to add a decorative circle before a
heading. Here's how you could do it:

<h2>My awesome Heading</h2>

And the CSS: 

h2::before {
  content: ""'; // Empty content
  display: inline-block; // It sits inline with the text
  width: 10px;
  height: 10px;
  background-color: red; // Makes the circle red
  border-radius: 50%; // Turns it into a circle
  margin-right: 10px; // Adds space between the circle and the text
}

This will create a small red circle that appears before the
heading text, without touching the HTML.


PRACTICAL USES
Here are some real-world uses for ::before and ::after: 

Icons: Add icons before or after text (like arrows, checkmarks, or symbols)
Quotes: Automatically add quote marks around blockquotes without needing to write them in the HTML.
Clearfix: A popular technique to clear floats in layouts by adding an empty ::after element with clear: both.
Buttons or Links: Add visual cues like arrows, icons or decorative elements to make buttons and links more engaging.
Custom Shapes: Add custom shapes like dots, lines, or borders for styling purposes.


RECAP
Here are some real-world uses for ::before and ::after:

- ::before: Inserts content before an element's actual
content.

- ::after: Inserts content after an element's actual
content.

- They only work when you define the content property,
even if it’s just an empty string.

- You can style them with any CSS properties (color, size,
background, positioning, etc.).

- They're useful for adding decoration, symbols, icons, or
additional text without touching the HTML structure.